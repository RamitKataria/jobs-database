generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model associated_ind {
  comid      Int        @default(autoincrement())
  indname    String     @db.VarChar(50)
  companies  companies  @relation(fields: [comid], references: [comid], onDelete: NoAction, onUpdate: NoAction)
  industries industries @relation(fields: [indname], references: [indname], onDelete: NoAction, onUpdate: NoAction)

  @@id([comid, indname])
}

model cities {
  cityname   String       @db.VarChar(100)
  statename  String?      @db.VarChar(100)
  counname   String       @db.VarChar(100)
  countries  countries    @relation(fields: [counname], references: [counname], onDelete: Cascade, onUpdate: NoAction)
  located_in located_in[]

  @@id([cityname, counname])
}

model citizenshipreq {
  reqid     Int       @id @default(autoincrement())
  statusreq String?   @db.VarChar(100)
  counname  String    @db.VarChar(100)
  countries countries @relation(fields: [counname], references: [counname], onDelete: NoAction, onUpdate: NoAction)
}

model companies {
  comid          Int              @id @default(autoincrement())
  comname        String?          @db.VarChar(100)
  nempl          Int?
  associated_ind associated_ind[]
  positions      positions[]
}

model countries {
  counname       String           @id @db.VarChar(100)
  cities         cities[]
  citizenshipreq citizenshipreq[]
}

model industries {
  indname        String           @id @db.VarChar(50)
  associated_ind associated_ind[]
}

model located_in {
  pid       Int       @default(autoincrement())
  cityname  String    @db.VarChar(100)
  counname  String    @db.VarChar(100)
  cities    cities    @relation(fields: [cityname, counname], references: [cityname, counname], onDelete: NoAction, onUpdate: NoAction)
  positions positions @relation(fields: [pid], references: [pid], onDelete: NoAction, onUpdate: NoAction)

  @@id([pid, cityname, counname])
}

model position_types {
  ptype           String      @id @db.VarChar(50)
  fixedlength     Boolean?
  aimedatstudents Boolean?
  positions       positions[]
}

model positions {
  pid            Int            @id @default(autoincrement())
  url            String?        @db.VarChar(1000)
  description    String?
  title          String?        @db.VarChar(50)
  expiry         DateTime?      @db.Date
  comid          Int
  ptype          String         @db.VarChar(50)
  companies      companies      @relation(fields: [comid], references: [comid], onDelete: NoAction, onUpdate: NoAction)
  position_types position_types @relation(fields: [ptype], references: [ptype], onDelete: NoAction, onUpdate: NoAction)
  located_in     located_in[]
  requires       requires[]
}

model requirements {
  reqid          Int        @id @default(autoincrement())
  strict         Boolean?
  citizenreqflag Boolean?
  expreqflag     Boolean?
  requires       requires[]
}

model requires {
  pid          Int          @default(autoincrement())
  reqid        Int
  positions    positions    @relation(fields: [pid], references: [pid], onDelete: NoAction, onUpdate: NoAction)
  requirements requirements @relation(fields: [reqid], references: [reqid], onDelete: NoAction, onUpdate: NoAction)

  @@id([pid, reqid])
}

model skills {
  sname          String           @id @db.VarChar(100)
  sdesc          String?
  experience_req experience_req[]
}

model experience_req {
  reqid      Int     @id @default(autoincrement())
  sname      String? @db.VarChar(100)
  licencereq String? @db.VarChar(100)
  years      Int?
  skills     skills? @relation(fields: [sname], references: [sname], onDelete: NoAction, onUpdate: NoAction)
}
